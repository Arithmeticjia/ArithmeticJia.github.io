<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-next主题支持数学公式</title>
    <url>/2019/11/28/Hexo-next%E4%B8%BB%E9%A2%98%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>本文主要解决Hexo-next主题支持数学公式问题<br><a id="more"></a></p>
<h4 id="更换Hexo的markdown渲染引擎"><a href="#更换Hexo的markdown渲染引擎" class="headerlink" title="更换Hexo的markdown渲染引擎"></a>更换Hexo的markdown渲染引擎</h4><p>hexo-renderer-kramed引擎是在默认的渲染引擎，hexo-renderer-marked的基础上修改了一些bug，两者比较接近，也比较轻量级。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p>
<h4 id="解决语义冲突"><a href="#解决语义冲突" class="headerlink" title="解决语义冲突"></a>解决语义冲突</h4><p>找到<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node_modules\kramed\lib\rules\inline.js</span><br></pre></td></tr></table></figure><br>修改如下两处<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></p>
<h4 id="在next主题中开启mathJax开关"><a href="#在next主题中开启mathJax开关" class="headerlink" title="在next主题中开启mathJax开关"></a>在next主题中开启mathJax开关</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Math Formulas Render Support</span></span><br><span class="line">math:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Default (<span class="literal">true</span>) will load mathjax / katex script on demand.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> That is it only render those page <span class="built_in">which</span> has `mathjax: <span class="literal">true</span>` <span class="keyword">in</span> Front-matter.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> If you <span class="built_in">set</span> it to <span class="literal">false</span>, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: true</span><br><span class="line">  engine: mathjax   # 添加这个，反正我的主题默认没有这一行</span><br><span class="line"><span class="meta">  #</span><span class="bash"> hexo-renderer-pandoc (or hexo-renderer-kramed) required <span class="keyword">for</span> full MathJax support.</span></span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true    # 这个改为true</span><br><span class="line">    # See: https://mhchem.github.io/MathJax-mhchem/</span><br><span class="line">    mhchem: true    # 这个改为true</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required <span class="keyword">for</span> full Katex support.</span></span><br><span class="line">  katex:</span><br><span class="line">    enable: false</span><br><span class="line">    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span><br><span class="line">    copy_tex: false</span><br></pre></td></tr></table></figure>
<h4 id="打开mathjax开关"><a href="#打开mathjax开关" class="headerlink" title="打开mathjax开关"></a>打开mathjax开关</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Using-Machine-Learning-for-Data-Center-Cooling-Infrastructure-Efficiency-Prediction</span><br><span class="line">date: 2019-11-28 22:53:32</span><br><span class="line">tags: [datacenter, machinelearning]</span><br><span class="line">category: DataCenter</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h4 id="添加公式"><a href="#添加公式" class="headerlink" title="添加公式"></a>添加公式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">$</span></span><br><span class="line">COP = \frac&#123;Q_&#123;CoolingCircuits&#125;&#125;&#123;P_&#123;CoolingCircuits&#125;&#125;</span><br><span class="line"><span class="meta">$</span><span class="bash">$</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>markdown</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>Using-Machine-Learning-for-Data-Center-Cooling-Infrastructure-Efficiency-Prediction</title>
    <url>/2019/11/28/Using-Machine-Learning-for-Data-Center-Cooling-Infrastructure-Efficiency-Prediction/</url>
    <content><![CDATA[<a id="more"></a><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>Power consumption continues to remain a critical aspect for High Performance Computing (HPC) data centers. It becomes even more crucial for Exascale computing since scaling today’s fastest system to an Exaflop level would consume more than 168 MW power which is 8 times higher than the 20 MW power consumption goal set, at the time of this publication, by the US Department of Energy.</p><a id="more"></a>

<p>This naturally leads to a necessity for energy efficiency improvement that will encompass the full chain of the power consumers, starting from the data center infrastructure, including cooling overheads and electrical losses, up to compute resource scheduling and application scaling.</p>
<p>In this paper a machine learning approach is proposed to model the Coefficient of Performance (COP) of HPC data center’s hot water cooling loop. The suggested model is validated on operational data obtained at Leibniz Supercomputing Centre (LRZ). The paper shows how this COP model can help to improve the energy efficiency of modern HPC data centers.</p>
<h4 id="PUE"><a href="#PUE" class="headerlink" title="PUE"></a>PUE</h4><script type="math/tex; mode=display">
PUE = \frac{P_{Tocal}}{P_{IT}} = \frac{P_{cooling}+P_{IT}+P_{electricalLosses}+P_{misc}}{P_{IT}}</script><h4 id="COP"><a href="#COP" class="headerlink" title="COP"></a>COP</h4><ul>
<li>COP: Coefficient of Performance<script type="math/tex; mode=display">
COP = \frac{Q_{CoolingCircuits}}{P_{CoolingCircuits}}</script></li>
<li>QCoolingCircuits - is the aggregated amount of cold<br>generated by the four cooling circuits (measured in<br>watts)</li>
<li>PCoolingCircuits - is the aggregated amount of power<br>consumed by the four cooling circuits (measured in<br>watts)</li>
</ul>
<h4 id="The-COP-Network-Model-Design"><a href="#The-COP-Network-Model-Design" class="headerlink" title="The COP Network Model Design"></a>The COP Network Model Design</h4><p>Recurrent neural networks [19] are a special class of artificial neural networks where neuron-like units form directed cycles - introducing feedback and thus memory to the network. This allows a better capturing of the time evolution of the underlying discrete time random signals. The Long Short-Term Memory (LSTM) [20] networks, used in this paper, are a special class of recurrent neural networks that are capable of capturing behaviors having relatively long timelags.</p>
<h5 id="Inputs-to-the-model"><a href="#Inputs-to-the-model" class="headerlink" title="Inputs to the model:"></a>Inputs to the model:</h5><ul>
<li>aggregated amount of cold generated by each cooling circuit</li>
<li>aggregated amount of power consumed by the fans of each cooling tower</li>
<li>number of active cooling towers</li>
<li>wet bulb temperature</li>
<li>inlet water temperature (to the distribution bar) from each cooling circuit (Figure 6) (×4)</li>
<li>return water temperature (to the distribution bar) to each cooling circuit (Figure 6) (×4)</li>
</ul>
<h5 id="Output-of-the-model"><a href="#Output-of-the-model" class="headerlink" title="Output of the model:"></a>Output of the model:</h5><ul>
<li>COP of the hot water cooling loop</li>
</ul>
<h4 id="The-COP-prediction-network"><a href="#The-COP-prediction-network" class="headerlink" title="The COP prediction network"></a>The COP prediction network</h4><p>The list below indicates the refined set of input parameters:</p>
<ul>
<li>aggregated amount of cold generated by each cooling circuit</li>
<li>number of active cooling towers</li>
<li>inlet water temperature from each cooling circuit (Figure 6) (×4)</li>
<li>return water temperature to each cooling circuit (Figure 6) (×4)</li>
</ul>
<p>A. Deriving Wet Bulb Temperature            // 推导湿球温度<br>Wet bulb temperature can be derived analytically using the dry bulb temperature and the relative humidity using the formula presented in [24], which in their turn can also be made accessible from weather forecast frameworks.</p>
<p>B. Deriving Power of Cooling Tower Fans     // 冷却塔风机的驱动功率<br>In order to predict the power consumption of the cooling tower fans (each cooling tower in our case has two fans, Figure 7) the estimation of the water flow rates (before entering the hydraulic gate) is required in advance. This can be determined analytically via the following equation:</p>
<script type="math/tex; mode=display">
flowRate_{KLT_{i}} = \frac{Q_{KLT_{i}}}{c_{p}*\rho *\Delta{T_{KLT_{i}}}}</script><ul>
<li><p><script type="math/tex">QKLT_{i}</script>- is the amount of cold generated by the cooling circuit connected to $KLT_{i}$</p>
</li>
<li><p>$\Delta T_{KLT_{i}}$- is the temperature difference between inlet and return water (from and to the distribution bar correspondingly) for the cooling circuit connected to $KLT_{i}$</p>
</li>
<li><p>$c_{p}$- is the water specific heat capacity;</p>
</li>
<li><p>$\rho$- is the water density.</p>
</li>
</ul>
<p>Having estimated the water flow rates, a network with two hidden LSTM layers using Stochastic Gradient Decent [25] as an optimizer was built taking the following inputs:</p>
<ul>
<li>$QKLT_{i}$amount of generated cold for a given cooling circuit (1≤ i ≤4)<script type="math/tex">KLT_{i}</script></li>
<li>$flowRate_{KLT_{i}}$ water flow rate (before entering the hydraulic gate) for a given cooling circuit (1≤ i ≤4)<script type="math/tex">KLT_{i}</script></li>
</ul>
]]></content>
      <categories>
        <category>DataCenter</category>
      </categories>
      <tags>
        <tag>datacenter</tag>
        <tag>machinelearning</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine-Learning-Applications-for-Data-Center-Optimization</title>
    <url>/2019/11/28/Machine-Learning-Applications-for-Data-Center-Optimization/</url>
    <content><![CDATA[<h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>The modern data center (DC) is a complex interaction of multiple mechanical, electrical and controls systems. The sheer number of possible operating configurations and nonlinear interdependencies make it difficult to understand and optimize energy efficiency. We develop a neural network framework that learns from actual operations data to model plant performance and predict PUE within a range of 0.004 +/­ 0.005 (mean absolute error +/­ 1 standard deviation), or 0.4% error for a PUE of 1.1. The model has been extensively tested and validated at Google DCs. The results demonstrate that machine learning is an effective way of leveraging existing sensor data to model DC performance and improve energy efficiency.</p><a id="more"></a>
<h4 id="Model-Implementation"><a href="#Model-Implementation" class="headerlink" title="Model Implementation"></a>Model Implementation</h4><p>A generic three­layered neural network is illustrated in Figure 2. In this study, the input matrix is an (m x n) array where is the number of training examples and is the number of features (DC input variables) including the IT load, weather conditions, number of chillers and cooling towers running, equipment setpoints, etc. The input matrix is then multiplied by the model parameters matrix θ 1 to produce the hidden state matrix [6]. In practice, acts as an intermediary state that interacts with the second parameters matrix θ 2 to calculate the output (x) [6]. The size and number of hidden layers can be varied to model systems of varying complexity.xmnxaahθ<br>Note that (x) is the output variable of interest and can represent a range of metrics that we wish to optimize. PUE is selected here to represent DC operational efficiency, with recognition that the metric is a ratio and not indicative of total facility­level energy consumption. Other examples include using server utilization data to maximize machine productivity, or equipment failure data to understand how the DC environment impacts reliability. The neural network will search for relationships between data features to generate a mathematical model that describes (x) as a function of the inputs. Understanding the underlying mathematical behavior of (x) allows us to control and optimize it.hθhθhθ<br><img src="https://www.guanacossj.com/media/articlebodypics/1574950962566.jpg" alt><br>The process of training a neural network model can be broken down into four steps, each of which are covered in greater detail below: </p>
<ul>
<li>Randomly initialize the model parameters θ </li>
<li>Implement the forward propagation algorithm,</li>
<li>Compute the cost function (θ)</li>
<li>Implement the back propagation algorithm and (5) Repeat steps 2 ­ 4 until convergence or the desired number of iterations</li>
</ul>
]]></content>
      <categories>
        <category>DataCenter</category>
      </categories>
      <tags>
        <tag>datacenter</tag>
        <tag>machinelearning</tag>
      </tags>
  </entry>
  <entry>
    <title>Django个人博客搭建教程-登录登出模块</title>
    <url>/2019/11/28/Django%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-%E7%99%BB%E5%BD%95%E7%99%BB%E5%87%BA%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>本文主要讲解自定义的登录登出模块，不涉及Django自带的认证模块，包括登录检查装饰器、链接自动跳转登录前url等<br><a id="more"></a></p>
<h4 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogUser</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">'''用户表'''</span></span><br><span class="line"></span><br><span class="line">    gender = (</span><br><span class="line">        (<span class="string">'male'</span>,<span class="string">'男'</span>),</span><br><span class="line">        (<span class="string">'female'</span>,<span class="string">'女'</span>),</span><br><span class="line">    )</span><br><span class="line">    status = (</span><br><span class="line">        (<span class="string">'active'</span>,<span class="string">'有效'</span>),</span><br><span class="line">        (<span class="string">'disabled'</span>,<span class="string">'无效'</span>),</span><br><span class="line">    )</span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">256</span>)</span><br><span class="line">    email = models.EmailField(unique=<span class="literal">True</span>)</span><br><span class="line">    sex = models.CharField(max_length=<span class="number">32</span>,choices=gender,default=<span class="string">'男'</span>)</span><br><span class="line">    c_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    userpic = models.ImageField(upload_to=<span class="string">'userpic'</span>,blank=<span class="literal">True</span>,null=<span class="literal">True</span>)</span><br><span class="line">    status = models.CharField(max_length=<span class="number">32</span>,choices=status,default=<span class="string">'有效'</span>)</span><br><span class="line">    brief = models.CharField(max_length=<span class="number">1024</span>,blank=<span class="literal">True</span>,null=<span class="literal">True</span>)</span><br><span class="line">    role = models.ManyToManyField(BlogRole, blank=<span class="literal">True</span>,null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request, *arg, **kwargs)</span>:</span></span><br><span class="line">        next_url = request.path_info</span><br><span class="line">        print(next_url)</span><br><span class="line">        <span class="keyword">if</span> request.session.get(<span class="string">'is_login'</span>) == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> f(request, *arg, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/JiaBlog/login/?next=%s'</span> % next_url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_view</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 当前端点击登录按钮时，提交数据到后端，进入该POST方法</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        <span class="comment"># 获取用户名和密码</span></span><br><span class="line">        username = request.POST.get(<span class="string">"username"</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">"password"</span>)</span><br><span class="line">        <span class="comment"># 在前端传回时也将跳转链接传回来</span></span><br><span class="line">        next_url = request.POST.get(<span class="string">"next_url"</span>)</span><br><span class="line">        print(next_url)</span><br><span class="line">        <span class="comment"># 对用户进行验证</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = models.BlogUser.objects.get(name=username)</span><br><span class="line">            <span class="keyword">if</span> user.status == <span class="string">'active'</span> <span class="keyword">or</span> user.status == <span class="string">'有效'</span>:</span><br><span class="line">                <span class="keyword">if</span> user.password == password:</span><br><span class="line">                    request.session[<span class="string">'is_login'</span>] = <span class="literal">True</span></span><br><span class="line">                    request.session[<span class="string">'user_id'</span>] = user.id</span><br><span class="line">                    request.session[<span class="string">'user_name'</span>] = user.name</span><br><span class="line">                    <span class="comment"># 如果跳转链接不为空并且跳转页面不是登出页面，则登录成功后跳转，否则直接进入主页</span></span><br><span class="line">                    <span class="keyword">if</span> next_url <span class="keyword">and</span> next_url != <span class="string">"/JiaBlog/logout/"</span>:</span><br><span class="line">                        response = redirect(next_url)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        response = redirect(<span class="string">"/JiaBlog/index/"</span>)</span><br><span class="line">                    <span class="keyword">return</span> response</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    message = <span class="string">"密码不正确！"</span></span><br><span class="line">            <span class="comment"># 若用户名或密码失败,则将提示语与跳转链接继续传递到前端</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                message = <span class="string">"用户状态信息异常，请联系管理员(18351922995)! "</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            message = <span class="string">"用户不存在！"</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>, locals())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        next_url = request.GET.get(<span class="string">"next"</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">"login.html"</span>, &#123;<span class="string">'next_url'</span>: next_url&#125;,locals())</span><br></pre></td></tr></table></figure>
<h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^login/$'</span>, views.login_view,name=<span class="string">'login'</span>),</span><br></pre></td></tr></table></figure>
<h4 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&#123;% url 'JiaBlog:login' %&#125;"</span>&gt;</span></span><br><span class="line">          &#123;% if message %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">          &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"form-signin-heading"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>Sign In<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inputUsername"</span> <span class="attr">name</span>=<span class="string">'username'</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">required</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"inputPassword"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"next"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"next_url"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; next_url &#125;&#125;"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> Remember me</span><br><span class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-signin"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">onclick</span>=<span class="string">"window.location.href = '/JiaBlog/register'"</span>&gt;</span>Register in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-github"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: black;text-decoration: none;"</span> <span class="attr">href</span>=<span class="string">"&#123;% url "</span><span class="attr">social:begin</span>" "<span class="attr">github</span>" %&#125;"&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-weibo"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: black;text-decoration: none;"</span> <span class="attr">href</span>=<span class="string">"&#123;% url "</span><span class="attr">social:begin</span>" "<span class="attr">weibo</span>" %&#125;"&gt;</span>Weibo<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-Facebook"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: black;text-decoration: none;"</span> <span class="attr">href</span>=<span class="string">"&#123;% url "</span><span class="attr">social:begin</span>" "<span class="attr">facebook</span>" %&#125;"&gt;</span>Facebook<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:inline-block;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-google"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: black;text-decoration: none;"</span> <span class="attr">href</span>=<span class="string">"&#123;% url "</span><span class="attr">social:begin</span>" "<span class="attr">google-oauth2</span>" %&#125;"&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;#          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"iconfont icon-github"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color: black;text-decoration: none;"</span> <span class="attr">href</span>=<span class="string">"&#123;% url "</span><span class="attr">social:begin</span>" "<span class="attr">facebook</span>" %&#125;"&gt;</span>Facebook Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>#&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fb-root"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">defer</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span> <span class="attr">src</span>=<span class="string">"https://connect.facebook.net/zh_CN/sdk.js#xfbml=1&amp;version=v5.0&amp;appId=2513272488741954&amp;autoLogAppEvents=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fb-login-button"</span> <span class="attr">data-width</span>=<span class="string">""</span> <span class="attr">data-size</span>=<span class="string">"medium"</span> <span class="attr">data-button-type</span>=<span class="string">"continue_with"</span> <span class="attr">data-auto-logout-link</span>=<span class="string">"true"</span> <span class="attr">data-use-continue-as</span>=<span class="string">"true"</span> <span class="attr">data-onlogin</span>=<span class="string">"checkLoginState()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"status"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;#            <span class="tag">&lt;<span class="name">fb:login-button</span> <span class="attr">scope</span>=<span class="string">"public_profile,email"</span> <span class="attr">onlogin</span>=<span class="string">"checkLoginState();"</span>&gt;</span><span class="tag">&lt;/<span class="name">fb:login-button</span>&gt;</span>#&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- /container --&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask入门教程-数据库连接与数据模型拆分</title>
    <url>/2019/11/27/Flask%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E6%8B%86%E5%88%86/</url>
    <content><![CDATA[<p>flask-SQLAlchemy是一套ORM(Object Relationship Mapping)框架，中文翻译就是模型关系映射，将数据库表映射成python中的对象，非常方便，创建一个模型，来通过模型来增删改数据库<br><a id="more"></a></p>
<h4 id="安装flask-SQLAlchemy"><a href="#安装flask-SQLAlchemy" class="headerlink" title="安装flask-SQLAlchemy"></a>安装flask-SQLAlchemy</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">pip3 install flask-SQLalchemy</span><br></pre></td></tr></table></figure>
<h4 id="安装flask-mysqldb"><a href="#安装flask-mysqldb" class="headerlink" title="安装flask-mysqldb"></a>安装flask-mysqldb</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">pip3 install flask-mysqldb</span><br></pre></td></tr></table></figure>
<p>ps: 貌似不装也可以，我发现我就没装</p>
<h4 id="安装pymysql"><a href="#安装pymysql" class="headerlink" title="安装pymysql"></a>安装pymysql</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure>
<h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>app.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">"mysql+pymysql://root:123@127.0.0.1:3306/JiaBlog"</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_COMMIT_TEARDOWN'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="literal">False</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'JSON_AS_ASCII'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database JiaBlog</span><br></pre></td></tr></table></figure>
<h4 id="拆分models"><a href="#拆分models" class="headerlink" title="拆分models"></a>拆分models</h4><p>在app.py同级目录下新建models.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 定义表名</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    <span class="comment"># 定义字段</span></span><br><span class="line">    <span class="comment"># db.Column 表示是一个字段</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    content = db.Column(db.Text)</span><br><span class="line">    timestamp = db.Column(db.DateTime, default=datetime.utcnow)</span><br></pre></td></tr></table></figure><br>修改app.py代码如下<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">"mysql+pymysql://root:980612ssj@%@101.132.70.184:3306/JiaBlog"</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_COMMIT_TEARDOWN'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="literal">False</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'JSON_AS_ASCII'</span>] = <span class="literal">False</span></span><br><span class="line">db.SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><br>启动报错<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">ImportError: cannot import name 'db'</span><br></pre></td></tr></table></figure><br>这是因为在app文件中，咱们引入了from models import Article，在models.py中咱们引入了from app import db，两个文件相互引用了，这个就是循环引用。出现循坏引用，代码就无法正常执行了。<br>为了解决循环引用，那么只需要保证两个文件不相互都需要对方就行了，这时候咱们可以加入第三个文件，让两个文件都需要第三个文件</p>
<h4 id="解决循环引用"><a href="#解决循环引用" class="headerlink" title="解决循环引用"></a>解决循环引用</h4><p>在app.py同级目录下新增exts.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="comment"># 此时先不传入app</span></span><br><span class="line">db = SQLAlchemy()</span><br></pre></td></tr></table></figure><br>修改model.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 定义表名</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    <span class="comment"># 定义字段</span></span><br><span class="line">    <span class="comment"># db.Column 表示是一个字段</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">50</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    content = db.Column(db.Text)</span><br><span class="line">    timestamp = db.Column(db.DateTime, default=datetime.utcnow)</span><br></pre></td></tr></table></figure><br>修改app.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Article</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">"mysql+pymysql://root:980612ssj@%@101.132.70.184:3306/JiaBlog"</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_COMMIT_TEARDOWN'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="literal">False</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_COMMIT_ON_TEARDOWN'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'JSON_AS_ASCII'</span>] = <span class="literal">False</span></span><br><span class="line">db.init_app(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask入门教程-你的第一个flask程序</title>
    <url>/2019/11/27/Flask%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B-%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAflask%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>Flask是由python实现的一个web微框架，让我们可以使用Python语言快速实现一个网站或Web服务<br><a id="more"></a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure>
<h4 id="工程目录示例"><a href="#工程目录示例" class="headerlink" title="工程目录示例"></a>工程目录示例</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="selector-tag">app</span><span class="selector-class">.py</span></span><br><span class="line">├── <span class="selector-tag">exts</span><span class="selector-class">.py</span></span><br><span class="line">├── <span class="selector-tag">manage</span><span class="selector-class">.py</span></span><br><span class="line">├── <span class="selector-tag">migrations</span></span><br><span class="line">│   ├── <span class="selector-tag">README</span></span><br><span class="line">│   ├── __<span class="selector-tag">pycache__</span></span><br><span class="line">│   ├── <span class="selector-tag">alembic</span><span class="selector-class">.ini</span></span><br><span class="line">│   ├── <span class="selector-tag">env</span><span class="selector-class">.py</span></span><br><span class="line">│   ├── <span class="selector-tag">script</span><span class="selector-class">.py</span><span class="selector-class">.mako</span></span><br><span class="line">│   └── <span class="selector-tag">versions</span></span><br><span class="line">├── <span class="selector-tag">models</span><span class="selector-class">.py</span></span><br><span class="line">├── <span class="selector-tag">prophet</span><span class="selector-class">.py</span></span><br><span class="line">├── <span class="selector-tag">static</span></span><br><span class="line">│   ├── <span class="selector-tag">css</span></span><br><span class="line">│   ├── <span class="selector-tag">data</span></span><br><span class="line">│   ├── <span class="selector-tag">img</span></span><br><span class="line">│   └── <span class="selector-tag">js</span></span><br><span class="line">└── <span class="selector-tag">templates</span></span><br><span class="line">    ├── <span class="selector-tag">imageinfo</span><span class="selector-class">.html</span></span><br><span class="line">    ├── <span class="selector-tag">imageinfogengduo</span><span class="selector-class">.html</span></span><br><span class="line">    ├── <span class="selector-tag">index</span><span class="selector-class">.html</span></span><br><span class="line">    ├── <span class="selector-tag">login</span><span class="selector-class">.html</span></span><br><span class="line">    ├── <span class="selector-tag">mp3info</span><span class="selector-class">.html</span></span><br><span class="line">    ├── <span class="selector-tag">test</span><span class="selector-class">.html</span></span><br><span class="line">    └── <span class="selector-tag">videoinfo</span><span class="selector-class">.html</span></span><br></pre></td></tr></table></figure>
<h4 id="返回你的第一个页面"><a href="#返回你的第一个页面" class="headerlink" title="返回你的第一个页面"></a>返回你的第一个页面</h4><p>app.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><br>在static目录下配置对于的js、css文件</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Django2.1.7集成Celery4.3.0任务队列路由</title>
    <url>/2019/11/26/Django2-1-7%E9%9B%86%E6%88%90Celery4-3-0%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<p>Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，并且提供维护这样一个系统的必需工具。它是一个专注于实时处理的任务队列，同时也支持任务调度。本文演示了如何在Django中集成Celery<br><a id="more"></a></p>
<h4 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install celery</span><br><span class="line">pip3 install django-celery</span><br></pre></td></tr></table></figure>
<h4 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery                             4.3.0            </span><br><span class="line">django-celery                      3.3.1</span><br></pre></td></tr></table></figure>
<h4 id="celery名词"><a href="#celery名词" class="headerlink" title="celery名词"></a>celery名词</h4><ul>
<li>任务task：就是一个Python函数。</li>
<li>队列queue：将需要执行的任务加入到队列中。</li>
<li>工人worker：在一个新进程中，负责执行队列中的任务。</li>
<li>代理人broker：负责调度，需要提前部署好redis。</li>
</ul>
<h4 id="工程目录结构"><a href="#工程目录结构" class="headerlink" title="工程目录结构"></a>工程目录结构</h4><h4 id="新建app"><a href="#新建app" class="headerlink" title="新建app"></a>新建app</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 manage.py startapp jia_celery</span><br></pre></td></tr></table></figure>
<h4 id="在项目-settings-py中安装"><a href="#在项目-settings-py中安装" class="headerlink" title="在项目/settings.py中安装"></a>在项目/settings.py中安装</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">'jia_celery'</span></span><br><span class="line">  <span class="string">'djcelery'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="在jia-celery目录下创建tasks-py文件"><a href="#在jia-celery目录下创建tasks-py文件" class="headerlink" title="在jia_celery目录下创建tasks.py文件"></a>在jia_celery目录下创建tasks.py文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create your tasks here</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> jia_celery.celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建任务函数</span></span><br><span class="line"><span class="meta">@celery_app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_task1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"任务函数(my_task1)正在执行...."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_task2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"任务函数(my_task2)正在执行...."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_task3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"任务函数(my_task3)正在执行...."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_task4</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"任务函数(my_task4)正在执行...."</span>)</span><br></pre></td></tr></table></figure>
<h4 id="在jia-celery目录下创建celery-py文件"><a href="#在jia-celery目录下创建celery-py文件" class="headerlink" title="在jia_celery目录下创建celery.py文件"></a>在jia_celery目录下创建celery.py文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> jia_celery <span class="keyword">import</span> celeryconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用增加配置的方式创建celery app</span></span><br><span class="line">app = Celery(<span class="string">'jia_celery.tasks'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从单独的配置模块中加载配置</span></span><br><span class="line">app.config_from_object(celeryconfig)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动搜索任务</span></span><br><span class="line">app.autodiscover_tasks([<span class="string">'jia_celery'</span>])</span><br></pre></td></tr></table></figure>
<h4 id="在jia-celery目录下创建celeryconfig-py"><a href="#在jia-celery目录下创建celeryconfig-py" class="headerlink" title="在jia_celery目录下创建celeryconfig.py"></a>在jia_celery目录下创建celeryconfig.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> kombu <span class="keyword">import</span> Exchange, Queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置结果存储</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://127.0.0.1:6379/9'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理人broker</span></span><br><span class="line">BROKER_URL = <span class="string">'redis://127.0.0.1:6379/8'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置任务路由</span></span><br><span class="line">CELERY_ROUTES = (&#123;</span><br><span class="line">    <span class="string">'jia_celery.tasks.my_task1'</span>: &#123;<span class="string">'queue'</span>: <span class="string">'queue1'</span>&#125;,</span><br><span class="line">    <span class="string">'jia_celery.tasks.my_task2'</span>: &#123;<span class="string">'queue'</span>: <span class="string">'queue1'</span>&#125;,</span><br><span class="line">    <span class="string">'jia_celery.tasks.my_task3'</span>: &#123;<span class="string">'queue'</span>: <span class="string">'queue2'</span>&#125;,</span><br><span class="line">    <span class="string">'jia_celery.tasks.my_task4'</span>: &#123;<span class="string">'queue'</span>: <span class="string">'queue2'</span>&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure>
<h4 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>
<h4 id="启动worker"><a href="#启动worker" class="headerlink" title="启动worker"></a>启动worker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">celery -A jia_celery worker -l info -Q queue1</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arithmetic@qingjiajiadeMBP MyBlog % celery -A jia_celery worker -l info -Q queue1</span><br><span class="line"> </span><br><span class="line"> -------------- celery@qingjiaowosuanshujiadeMacBook-Pro.local v4.3.0 (rhubarb)</span><br><span class="line">---- **** ----- </span><br><span class="line">--- * ***  * -- Darwin-19.0.0-x86_64-i386-64bit 2019-11-26 21:39:22</span><br><span class="line">-- * - **** --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         jia_celery.tasks:0x10823a9b0</span><br><span class="line">- ** ---------- .&gt; transport:   redis://127.0.0.1:6379/8</span><br><span class="line">- ** ---------- .&gt; results:     redis://127.0.0.1:6379/9</span><br><span class="line">- *** --- * --- .&gt; concurrency: 8 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; queue1           exchange=queue1(direct) key=queue1</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . jia_celery.tasks.my_task1</span><br><span class="line">  . jia_celery.tasks.my_task2</span><br><span class="line">  . jia_celery.tasks.my_task3</span><br><span class="line">  . jia_celery.tasks.my_task4</span><br><span class="line"></span><br><span class="line">[2019-11-26 21:39:22,382: INFO/MainProcess] Connected to redis://127.0.0.1:6379/8</span><br><span class="line">[2019-11-26 21:39:22,392: INFO/MainProcess] mingle: searching for neighbors</span><br><span class="line">[2019-11-26 21:39:23,416: INFO/MainProcess] mingle: all alone</span><br><span class="line">[2019-11-26 21:39:23,432: INFO/MainProcess] celery@qingjiaowosuanshujiadeMacBook-Pro.local ready.</span><br><span class="line">^C</span><br><span class="line">worker: Hitting Ctrl+C again will terminate all running tasks!</span><br><span class="line"></span><br><span class="line">worker: Warm shutdown (MainProcess)</span><br><span class="line">Arithmetic@qingjiajiadeMBP MyBlog % celery -A jia_celery worker -l info -Q queue1</span><br><span class="line"> </span><br><span class="line"> -------------- celery@qingjiaowosuanshujiadeMacBook-Pro.local v4.3.0 (rhubarb)</span><br><span class="line">---- **** ----- </span><br><span class="line">--- * ***  * -- Darwin-19.0.0-x86_64-i386-64bit 2019-11-26 21:41:26</span><br><span class="line">-- * - **** --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         jia_celery.tasks:0x10d626940</span><br><span class="line">- ** ---------- .&gt; transport:   redis://127.0.0.1:6379/8</span><br><span class="line">- ** ---------- .&gt; results:     redis://127.0.0.1:6379/9</span><br><span class="line">- *** --- * --- .&gt; concurrency: 8 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; queue1           exchange=queue1(direct) key=queue1</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . jia_celery.tasks.my_task1</span><br><span class="line">  . jia_celery.tasks.my_task2</span><br><span class="line">  . jia_celery.tasks.my_task3</span><br><span class="line">  . jia_celery.tasks.my_task4</span><br><span class="line"></span><br><span class="line">[2019-11-26 21:41:27,005: INFO/MainProcess] Connected to redis://127.0.0.1:6379/8</span><br><span class="line">[2019-11-26 21:41:27,017: INFO/MainProcess] mingle: searching for neighbors</span><br><span class="line">[2019-11-26 21:41:28,043: INFO/MainProcess] mingle: all alone</span><br><span class="line">[2019-11-26 21:41:28,062: INFO/MainProcess] celery@qingjiaowosuanshujiadeMacBook-Pro.local ready.</span><br></pre></td></tr></table></figure>
<h4 id="测试任务1、2"><a href="#测试任务1、2" class="headerlink" title="测试任务1、2"></a>测试任务1、2</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arithmetic@qingjiajiadeMBP MyBlog % python3</span><br><span class="line">Python 3.6.6 (v3.6.6:4cf1f54eb7, Jun 26 2018, 19:50:54) </span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin</span><br><span class="line">Type "help", "copyright", "credits" or "license" for more information.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from jia_celery.tasks import *</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; my_task1.delay()</span></span><br><span class="line">&lt;AsyncResult: 7bce3af5-5d5f-4b45-b317-7c47b81c4391&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; my_task2.delay()</span></span><br><span class="line">&lt;AsyncResult: 6879f8e9-8bdc-4d47-9baf-5aa7e3c303af&gt;</span><br></pre></td></tr></table></figure>
<h4 id="查看queue1-的-worker-执行日志"><a href="#查看queue1-的-worker-执行日志" class="headerlink" title="查看queue1 的 worker 执行日志"></a>查看queue1 的 worker 执行日志</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2019-11-26 21:42:02,424: INFO/MainProcess] Received task: jia_celery.tasks.my_task1[7bce3af5-5d5f-4b45-b317-7c47b81c4391]  </span><br><span class="line">[2019-11-26 21:42:02,426: WARNING/ForkPoolWorker-8] 任务函数(my_task1)正在执行....</span><br><span class="line">[2019-11-26 21:42:02,430: INFO/ForkPoolWorker-8] Task jia_celery.tasks.my_task1[7bce3af5-5d5f-4b45-b317-7c47b81c4391] succeeded in 0.00366099600068992s: None</span><br><span class="line">[2019-11-26 21:42:21,639: INFO/MainProcess] Received task: jia_celery.tasks.my_task2[6879f8e9-8bdc-4d47-9baf-5aa7e3c303af]  </span><br><span class="line">[2019-11-26 21:42:21,642: WARNING/ForkPoolWorker-2] 任务函数(my_task2)正在执行....</span><br><span class="line">[2019-11-26 21:42:21,646: INFO/ForkPoolWorker-2] Task jia_celery.tasks.my_task2[6879f8e9-8bdc-4d47-9baf-5aa7e3c303af] succeeded in 0.0050763219987857156s: None</span><br></pre></td></tr></table></figure>
<p>如果此时测试task3、4，查看queue1 的 worker 执行日志是不会有对应任务执行的，因为不同任务指定了不同的队列处理</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub博客Hexo配合next主题增加搜索引擎验证</title>
    <url>/2019/11/24/GitHub%E5%8D%9A%E5%AE%A2Hexo%E9%85%8D%E5%90%88next%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>GitHub博客Hexo配合next主题增加搜索引擎验证，Github 上利用 hexo 建立的博客是无法被搜索引擎搜索到的。<br><a id="more"></a><br>Github 本身也不会将信息提交给引擎。所以，为了让博客信息被检索到，我们需要手动将博客网站提交给搜索引擎并验证，实际上就是验证网站是我们自己的</p>
<h3 id="提交Google站点"><a href="#提交Google站点" class="headerlink" title="提交Google站点"></a>提交Google站点</h3><p><a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">Google</a></p>
<h3 id="选择HTML-meta-标签验证"><a href="#选择HTML-meta-标签验证" class="headerlink" title="选择HTML meta 标签验证"></a>选择HTML meta 标签验证</h3><p>Next 主题下，页面的 header 设置在<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/themes/</span>hexo-theme-<span class="keyword">next</span><span class="regexp">/layout/</span>_partials<span class="regexp">/head/</span>head.swig</span><br></pre></td></tr></table></figure><br><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> theme.google_site_verification %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"RkRVaaOa4vX520pamxy6ip0HfuaQ-NCyM1SvGbzqUFA"</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br>这里的content从Google控制台获取</p>
<h3 id="提交Baidu站点"><a href="#提交Baidu站点" class="headerlink" title="提交Baidu站点"></a>提交Baidu站点</h3><p><a href="http://www.baidu.com/search/url_submit.htm" target="_blank" rel="noopener">Baidu</a></p>
<h3 id="选择HTML-meta-标签验证-1"><a href="#选择HTML-meta-标签验证-1" class="headerlink" title="选择HTML meta 标签验证"></a>选择HTML meta 标签验证</h3><p>Next 主题下，页面的 header 设置在<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/themes/</span>hexo-theme-<span class="keyword">next</span><span class="regexp">/layout/</span>_partials<span class="regexp">/head/</span>head.swig</span><br></pre></td></tr></table></figure><br><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> theme.baidu_site_verification %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"baidu-site-verification"</span> <span class="attr">content</span>=<span class="string">"es0rExrlvZ"</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br>这里的content从Baidu控制台获取</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>github</tag>
        <tag>baidu</tag>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS下Git与GitHub</title>
    <url>/2019/11/24/MacOS%E4%B8%8BGit%E4%B8%8EGitHub/</url>
    <content><![CDATA[<p>还是不知道写啥，本文是有关Mac OS上Git与GitHub相关配置的介绍说明<br><a id="more"></a></p>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>该命令也可以升级最新的git<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></p>
<h4 id="查看git指向和版本信息"><a href="#查看git指向和版本信息" class="headerlink" title="查看git指向和版本信息"></a>查看git指向和版本信息</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">which git</span><br><span class="line">/usr/bin/git</span><br><span class="line">git --version</span><br><span class="line">git version 2.21.0 (Apple Git-122.2)</span><br></pre></td></tr></table></figure>
<h4 id="配置github用户名和邮箱"><a href="#配置github用户名和邮箱" class="headerlink" title="配置github用户名和邮箱"></a>配置github用户名和邮箱</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global user.name "ArithmeticJia"</span><br><span class="line">git config --global user.email "1097197237@qq.com"</span><br></pre></td></tr></table></figure>
<h4 id="生成ssh密钥"><a href="#生成ssh密钥" class="headerlink" title="生成ssh密钥"></a>生成ssh密钥</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "1097197237@qq.com"</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/Arithmetic/.ssh/id_rsa): </span><br><span class="line">/Users/Arithmetic/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /Users/Arithmetic/.ssh/id_rsa.</span><br></pre></td></tr></table></figure>
<h4 id="在GitHub上新增ssh密钥"><a href="#在GitHub上新增ssh密钥" class="headerlink" title="在GitHub上新增ssh密钥"></a>在GitHub上新增ssh密钥</h4><p>复制密钥<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">cat .ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><br>路径一般是<br><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">/User/ArithmeticJia/.ssh</span><br></pre></td></tr></table></figure><br>登录GitHub（默认你已经注册了GitHub账号），添加ssh key，点击Settings，如图<br><img src="https://www.guanacossj.com/media/articlebodypics/E901D42E-753A-4E46-BC71-05C54C555B0D.png" alt=""></p>
<h4 id="链接验证"><a href="#链接验证" class="headerlink" title="链接验证"></a>链接验证</h4><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">Hi Arithmeticjia! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Django个人博客搭建教程-阿里云部署(Ubuntu+Nginx+uwsgi)升级https</title>
    <url>/2019/11/24/Django%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2(Ubuntu+Nginx+uwsgi)%E5%8D%87%E7%BA%A7https/</url>
    <content><![CDATA[<p>更安全的https<br><a id="more"></a></p>
<h4 id="一、阿里云申请SSL证书"><a href="#一、阿里云申请SSL证书" class="headerlink" title="一、阿里云申请SSL证书"></a>一、阿里云申请SSL证书</h4><p>略</p>
<h4 id="二、将pem和key放在nginx目录下"><a href="#二、将pem和key放在nginx目录下" class="headerlink" title="二、将pem和key放在nginx目录下"></a>二、将pem和key放在nginx目录下</h4><p>仅供参考<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/nginx/cert/1831344_www.guanacossj.com.pem;      # 路径/pem文件</span><br><span class="line">/etc/nginx/cert/1831344_www.guanacossj.com.key;      # 路径/key文件</span><br></pre></td></tr></table></figure></p>
<h4 id="三、修改nginx-conf"><a href="#三、修改nginx-conf" class="headerlink" title="三、修改nginx.conf"></a>三、修改nginx.conf</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">  server &#123;</span><br><span class="line">      listen 80;</span><br><span class="line">      server_name  _;</span><br><span class="line">      return 301 https://www.guanacossj.com$request_uri;</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">  server &#123;</span><br><span class="line">      listen       443 default_server;</span><br><span class="line">      listen       [::]:443 default_server;</span><br><span class="line">      server_name  _;</span><br><span class="line">      ssl on;</span><br><span class="line">      ssl_certificate   /etc/nginx/cert/1831344_www.guanacossj.com.pem;     # 路径/pem文件</span><br><span class="line">      ssl_certificate_key  /etc/nginx/cert/1831344_www.guanacossj.com.key;  # 路径/key文件</span><br><span class="line">      ssl_session_timeout 5m;</span><br><span class="line">      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">      ssl_prefer_server_ciphers on;</span><br><span class="line">      charset     utf-8;</span><br><span class="line">      client_max_body_size 1000M;   # adjust to taste</span><br><span class="line">      include /etc/nginx/default.d/*.conf;</span><br><span class="line">      location /static &#123;</span><br><span class="line">      alias /home/MyBlog/static; # ָÏdjangoµÄtaticĿ¼</span><br><span class="line">      &#125;</span><br><span class="line">      location /static/rest_framework/ &#123;</span><br><span class="line">      alias /usr/local/lib/python3.6/dist-packages/rest_framework/static/rest_framework/</span><br><span class="line">    ;&#125;</span><br><span class="line"> </span><br><span class="line">    # Finally, send all non-media requests to the Django server.</span><br><span class="line">    location / &#123;</span><br><span class="line">        uwsgi_pass  127.0.0.1:8000;</span><br><span class="line">        #uwsgi_pass  django;</span><br><span class="line">        include     uwsgi_params; 	# the uwsgi_params file you installed           </span><br><span class="line">        proxy_redirect off;</span><br><span class="line">	      proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line">	      uwsgi_send_timeout 600;</span><br><span class="line">        uwsgi_connect_timeout 600;  </span><br><span class="line">        uwsgi_read_timeout 600; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里把你原来的监听80端口改为监听443端口即可，我之前一直不成功主要是我试图再加一个443端口的监听，应该也可以吧，不管了，反正这样肯定没问题，然后如果还想让http能购访问，就做个重定向。</p>
<h4 id="四、重启nginx"><a href="#四、重启nginx" class="headerlink" title="四、重启nginx"></a>四、重启nginx</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>阿里云</tag>
        <tag>nginx</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>Django个人博客搭建教程-REST风格API</title>
    <url>/2019/11/24/Django%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B-REST%E9%A3%8E%E6%A0%BCAPI/</url>
    <content><![CDATA[<p>Django REST Framework 是一个强大且灵活的工具包，用以构建Web API<br>Django REST Framework可以在Django的基础上迅速实现API，并且自身还带有WEB的测试页面，可以方便的测试自己的API<br><a id="more"></a></p>
<h4 id="一、安装依赖"><a href="#一、安装依赖" class="headerlink" title="一、安装依赖"></a>一、安装依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install djangorestframework</span><br></pre></td></tr></table></figure>
<h4 id="二、在settings-py中添加应用"><a href="#二、在settings-py中添加应用" class="headerlink" title="二、在settings.py中添加应用"></a>二、在settings.py中添加应用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ....</span><br><span class="line"> </span><br><span class="line"><span class="string">'rest_framework'</span>,    <span class="comment"># 加上这句，加在api的前面</span></span><br><span class="line">    ....             <span class="comment"># 后面是你的应用名称</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="三、路由注册"><a href="#三、路由注册" class="headerlink" title="三、路由注册"></a>三、路由注册</h4><p>子urls.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url,include</span><br><span class="line"><span class="keyword">from</span> JiaBlog <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"> </span><br><span class="line">app_name = <span class="string">'JiaBlog'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 定义路由地址</span></span><br><span class="line">route = routers.DefaultRouter()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注册新的路由地址</span></span><br><span class="line">route.register(<span class="string">r'getarticleinfo'</span> , views.GetArticleInfo)</span><br><span class="line"> </span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">'api/'</span>, include(route.urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>主urls.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""MyBlog URL Configuration</span></span><br><span class="line"><span class="string">The `urlpatterns` list routes URLs to views. For more information please see:</span></span><br><span class="line"><span class="string">    https://docs.djangoproject.com/en/2.1/topics/http/urls/</span></span><br><span class="line"><span class="string">Examples:</span></span><br><span class="line"><span class="string">Function views</span></span><br><span class="line"><span class="string">    1. Add an import:  from my_app import views</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  path('', views.home, name='home')</span></span><br><span class="line"><span class="string">Class-based views</span></span><br><span class="line"><span class="string">    1. Add an import:  from other_app.views import Home</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')</span></span><br><span class="line"><span class="string">Including another URLconf</span></span><br><span class="line"><span class="string">    1. Import the include() function: from django.urls import include, path</span></span><br><span class="line"><span class="string">    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> MyBlog.settings <span class="keyword">import</span> MEDIA_ROOT</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"><span class="keyword">from</span> JiaBlog <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> haystack.views <span class="keyword">import</span> SearchView</span><br><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="comment">#from django.views import static</span></span><br><span class="line"> </span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^$'</span>, views.blog_index),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'JiaBlog/'</span>, include(<span class="string">'JiaBlog.urls'</span>, namespace=<span class="string">"JiaBlog"</span>)),</span><br><span class="line">]+static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure></p>
<h4 id="四、视图函数"><a href="#四、视图函数" class="headerlink" title="四、视图函数"></a>四、视图函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers,viewsets</span><br><span class="line"><span class="keyword">from</span> JiaBlog.models <span class="keyword">import</span> Articles</span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticlesSerializers</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Articles                        <span class="comment"># 指定的模型类</span></span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'body'</span>, <span class="string">'timestamp'</span>,<span class="string">'authorname'</span>,<span class="string">'views'</span>,<span class="string">'tags'</span>,<span class="string">'category'</span>)  <span class="comment"># 需要序列化的属性</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetArticleInfo</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    queryset = Articles.objects.all().order_by(<span class="string">'-id'</span>)</span><br><span class="line">    serializer_class = ArticlesSerializers</span><br></pre></td></tr></table></figure>
<h4 id="五、数据模型"><a href="#五、数据模型" class="headerlink" title="五、数据模型"></a>五、数据模型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Articles</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    id = models.AutoField(primary_key=<span class="literal">True</span>)                         <span class="comment"># id</span></span><br><span class="line">    title = models.CharField(max_length = <span class="number">150</span>)                      <span class="comment"># 博客标题</span></span><br><span class="line">    body = models.TextField()                                       <span class="comment"># 博客正文</span></span><br><span class="line">    timestamp = models.DateTimeField()                              <span class="comment"># 创建时间</span></span><br><span class="line">    authorname = models.ForeignKey(<span class="string">'JiaBlog.BlogUser'</span>,on_delete=models.CASCADE)        <span class="comment"># 作者姓名</span></span><br><span class="line">    views = models.PositiveIntegerField(default=<span class="number">0</span>)</span><br><span class="line">    category = models.ForeignKey(Category,on_delete=models.CASCADE,primary_key=<span class="literal">False</span>)</span><br><span class="line">    tags = models.ManyToManyField(Tag, blank=<span class="literal">True</span>,null=<span class="literal">True</span>)</span><br><span class="line">    greats = models.PositiveIntegerField(default=<span class="number">0</span>)</span><br><span class="line">    comments = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    status = models.CharField(max_length=<span class="number">20</span>, default=<span class="string">"DEL"</span>)</span><br><span class="line">    brief = models.CharField(max_length=<span class="number">200</span>,blank=<span class="literal">True</span>,null=<span class="literal">True</span>)</span><br><span class="line">    pic = models.ImageField(upload_to=<span class="string">'jiablogimages'</span>)</span><br><span class="line">    <span class="comment"># bodypic = models.ImageField(upload_to='jiablogimages',blank=True,null=True)</span></span><br><span class="line">    istop = models.CharField(max_length=<span class="number">5</span>,default=<span class="string">''</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    articlebodybrief = models.TextField(blank=<span class="literal">True</span>,null=<span class="literal">True</span>)</span><br><span class="line">    last_edit_timestamp = models.DateTimeField(auto_now=<span class="literal">True</span>,verbose_name=<span class="string">"更新时间"</span>,editable=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">GET /JiaBlog/api/getarticleinfo/</span><br><span class="line">HTTP 200 OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Vary: Accept</span><br><span class="line"> </span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">        "id": 3,</span><br><span class="line">        "title": "python中的GIL锁",</span><br><span class="line">        "body": "为什么我们说python中无法实现真正的多线程呢，这是因为在C语言写的python解释器中存在全局解释器锁，由于全局解释器锁的存在，在同一时间内，python解释器只能运行一个线程的代码，这大大影响了python多线程的性能。而这个解释器锁由于历史原因，现在几乎无法消除。<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>python GIL 之所以会影响多线程等性能，是因为在多线程的情况下，只有当线程获得了一个全局锁的时候，那么该线程的代码才能运行，而全局锁只有一个，所以使用python多线程，在同一时刻也只有一个线程在运行，因此在即使在多核的情况下也只能发挥出单核的性能。<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>对于有io操作的线程，当一个线程在做io操作的时候，因为io操作不需要cpu，所以，这个时候，python会释放python全局锁，这样其他需要运行的线程就会使用该锁。",</span><br><span class="line">        "timestamp": "2019-02-21T22:01:52",</span><br><span class="line">        "authorname": 1,</span><br><span class="line">        "views": 2249,</span><br><span class="line">        "tags": [</span><br><span class="line">            3</span><br><span class="line">        ],</span><br><span class="line">        "category": 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        "id": 2,</span><br><span class="line">        "title": "Django和Flask的区别",</span><br><span class="line">        "body": "##写在最前面：<span class="symbol">\r</span><span class="symbol">\n</span>python web开发有很多常用的框架，主要包括Django，Flask，Tornado，Diesel，Cubes，Pulsar，Falcon，webpy，大家最熟知的还是Django和Flask，今天就来简单介绍一下Django和Flask的区别，本博客就是使用Django开发的，Flask不是很了解，因为没有用过，今天就借花献佛，简单介绍一下。<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>##Flask<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>Flask确实很“轻”，不愧是Micro Framework，从Django转向Flask的开发者一定会如此感慨，除非二者均为深入使用过<span class="symbol">\r</span><span class="symbol">\n</span>Flask自由、灵活，可扩展性强，第三方库的选择面广，开发时可以结合自己最喜欢用的轮子，也能结合最流行最强大的Python库<span class="symbol">\r</span><span class="symbol">\n</span>    入门简单，即便没有多少web开发经验，也能很快做出网站<span class="symbol">\r</span><span class="symbol">\n</span>    非常适用于小型网站<span class="symbol">\r</span><span class="symbol">\n</span>    非常适用于开发web服务的API<span class="symbol">\r</span><span class="symbol">\n</span>    开发大型网站无压力，但代码架构需要自己设计，开发成本取决于开发者的能力和经验<span class="symbol">\r</span><span class="symbol">\n</span>    各方面性能均等于或优于Django<span class="symbol">\r</span><span class="symbol">\n</span>    Django自带的或第三方的好评如潮的功能，Flask上总会找到与之类似第三方库<span class="symbol">\r</span><span class="symbol">\n</span>    Flask灵活开发，Python高手基本都会喜欢Flask，但对Django却可能褒贬不一<span class="symbol">\r</span><span class="symbol">\n</span>    Flask与关系型数据库的配合使用不弱于Django，而其与NoSQL数据库的配合远远优于Django<span class="symbol">\r</span><span class="symbol">\n</span>    Flask比Django更加Pythonic，与Python的philosophy更加吻合<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>##Django<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>Django太重了，除了web框架，自带ORM和模板引擎，灵活和自由度不够高<span class="symbol">\r</span><span class="symbol">\n</span>    Django能开发小应用，但总会有“杀鸡焉用牛刀”的感觉<span class="symbol">\r</span><span class="symbol">\n</span>    Django的自带ORM非常优秀，综合评价略高于SQLAlchemy<span class="symbol">\r</span><span class="symbol">\n</span>    Django自带的模板引擎简单好用，但其强大程度和综合评价略低于Jinja<span class="symbol">\r</span><span class="symbol">\n</span>    Django自带ORM也使Django与关系型数据库耦合度过高，如果想使用MongoDB等NoSQL数据，需要选取合适的第三方库，且总感觉Django+SQL才是天生一对的搭配，Django+NoSQL砍掉了Django的半壁江山<span class="symbol">\r</span><span class="symbol">\n</span>    Django目前支持Jinja等非官方模板引擎<span class="symbol">\r</span><span class="symbol">\n</span>    Django自带的数据库管理app好评如潮<span class="symbol">\r</span><span class="symbol">\n</span>    Django非常适合企业级网站的开发：快速、靠谱、稳定<span class="symbol">\r</span><span class="symbol">\n</span>    Django成熟、稳定、完善，但相比于Flask，Django的整体生态相对封闭<span class="symbol">\r</span><span class="symbol">\n</span>    Django是Python web框架的先驱，用户多，第三方库最丰富，最好的Python库，如果不能直接用到Django中，也一定能找到与之对应的移植<span class="symbol">\r</span><span class="symbol">\n</span>    Django上手也比较容易，开发文档详细、完善，相关资料丰富",</span><br><span class="line">        "timestamp": "2019-02-21T21:25:28",</span><br><span class="line">        "authorname": 1,</span><br><span class="line">        "views": 2599,</span><br><span class="line">        "tags": [</span><br><span class="line">            1,</span><br><span class="line">            2</span><br><span class="line">        ],</span><br><span class="line">        "category": 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        "id": 1,</span><br><span class="line">        "title": "用Django写一个自己的博客网站",</span><br><span class="line">        "body": "##写在最前面：<span class="symbol">\r</span><span class="symbol">\n</span>想用Django写网站很久了，本地也建立过很多demo，对于整个框架的入门算是熟练了。用pycharm可 <span class="symbol">\r</span><span class="symbol">\n</span>以很方便的新建一个Django工程。专业版的Pycharm是自带Django的，目前Diango的最新版本应该是2.1。<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>IDE:Pycharm<span class="symbol">\r</span><span class="symbol">\n</span>python版本：3.6<span class="symbol">\r</span><span class="symbol">\n</span>操作系统：macOS Mojave<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>![图片](/media/images/blog1body1.png)<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>这是用Django2.1写的一个个人博客的展示，还有一个含有带登录、注册、登出的session控制的监控系统，博客本身内置下载、天气查询、Google在线翻译，还可以发送QQ邮件。<span class="symbol">\r</span><span class="symbol">\n</span>下面先贴一下目录结构：<span class="symbol">\r</span><span class="symbol">\n</span><span class="symbol">\r</span><span class="symbol">\n</span>![图片](/static/images/blog1body2.jpg)",</span><br><span class="line">        "timestamp": "2019-02-21T21:20:23",</span><br><span class="line">        "authorname": 1,</span><br><span class="line">        "views": 2657,</span><br><span class="line">        "tags": [</span><br><span class="line">            1</span><br><span class="line">        ],</span><br><span class="line">        "category": 1</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>restframework</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js入门（四）---用Pycharm创建你的第一个完整的HelloVue</title>
    <url>/2019/11/23/Vue-js%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89-%E7%94%A8Pycharm%E5%88%9B%E5%BB%BA%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84HelloVue/</url>
    <content><![CDATA[<p>本文主要介绍了如何在Pycharm中构建一个简单的vue应用,摘要要写50个字，不然markdown格式会很丑，我也不知道要写啥，感觉没啥好写的，现在应该差不多了<br><a id="more"></a></p>
<h4 id="一、在Pycharm中下载Vue-js插件"><a href="#一、在Pycharm中下载Vue-js插件" class="headerlink" title="一、在Pycharm中下载Vue.js插件"></a>一、在Pycharm中下载Vue.js插件</h4><p><img src="https://www.guanacossj.com/media/articlebodypics/1571819210811.jpg" alt=""></p>
<h4 id="二、新建一个Vue-js项目"><a href="#二、新建一个Vue-js项目" class="headerlink" title="二、新建一个Vue.js项目"></a>二、新建一个Vue.js项目</h4><p><img src="https://www.guanacossj.com/media/articlebodypics/1571819312914.jpg" alt=""><br>然后等待安装启动完成，这里提示我要不要用淘宝源，我果断同意啊</p>
<h4 id="三、项目启动"><a href="#三、项目启动" class="headerlink" title="三、项目启动"></a>三、项目启动</h4><p><img src="https://www.guanacossj.com/media/articlebodypics/1571819476507.jpg" alt=""></p>
<h4 id="四、项目目录结构"><a href="#四、项目目录结构" class="headerlink" title="四、项目目录结构"></a>四、项目目录结构</h4><p><img src="https://www.guanacossj.com/media/articlebodypics/1571819572736.jpg" alt=""><br><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">'''</span><br><span class="line">-<span class="ruby">node_modules：项目的依赖</span></span><br><span class="line"><span class="ruby">-public</span></span><br><span class="line"><span class="ruby">    -favicon.ico  网页的图标</span></span><br><span class="line"><span class="ruby">    -index.html   主页面</span></span><br><span class="line"><span class="ruby">-src：我们需要关注的</span></span><br><span class="line"><span class="ruby">    -assets：方静态文件</span></span><br><span class="line"><span class="ruby">    -components：小组件</span></span><br><span class="line"><span class="ruby">    -views  ：页面组件</span></span><br><span class="line"><span class="ruby">    -App.vue ：主组件</span></span><br><span class="line"><span class="ruby">    -main.js ：项目主入口js</span></span><br><span class="line"><span class="ruby">    -router.js： 路由相关，以后配置路由，都在这里配置</span></span><br><span class="line"><span class="ruby">    -store.js  ：vuex相关，状态管理器</span></span><br><span class="line"><span class="ruby">-package.json   项目的依赖文件</span></span><br><span class="line"><span class="ruby"><span class="string">''</span><span class="string">'</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="五、修改默认的启动页"><a href="#五、修改默认的启动页" class="headerlink" title="五、修改默认的启动页"></a>五、修改默认的启动页</h4><p>在components下新建一个HelloVue<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"HelloVue"</span>,</span></span><br><span class="line">        data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            msg: <span class="string">'HelloVue'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><br>修改App.vue<br><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloVue.vue'</span></span><br></pre></td></tr></table></figure><br>效果图<br><img src="https://www.guanacossj.com/media/articlebodypics/1571819861870.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云Ubuntu下Collectd+Grafana+Influxdb的搭建教程</title>
    <url>/2019/11/23/%E8%85%BE%E8%AE%AF%E4%BA%91Ubuntu%E4%B8%8BCollectd-Grafana-Influxdb%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>本文介绍了腾讯云服务器Ubuntu下监控平台的搭建教程，主要组件分为三个部分，grafana、collectd、influxdb。grafana主要用来作为监控的前端展示，collectd负责采集服务器性能指标，influxdb则是一款开源的时序数据库，负责采集数据的存储<br><a id="more"></a></p>
<h2 id="一、安装Collectd"><a href="#一、安装Collectd" class="headerlink" title="一、安装Collectd"></a>一、安装Collectd</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p><code>sudo apt install collectd collectd-utils</code></p>
<h3 id="2、修改collectd-conf"><a href="#2、修改collectd-conf" class="headerlink" title="2、修改collectd.conf"></a>2、修改collectd.conf</h3><p>开启常用插件<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LoadPlugin cpu</span><br><span class="line">LoadPlugin df</span><br><span class="line">LoadPlugin disk</span><br><span class="line">LoadPlugin interface</span><br><span class="line">LoadPlugin irq</span><br><span class="line">LoadPlugin load</span><br><span class="line">LoadPlugin memory</span><br><span class="line">LoadPlugin mysql</span><br><span class="line">LoadPlugin network</span><br><span class="line">LoadPlugin processes</span><br><span class="line">LoadPlugin rrdtool</span><br><span class="line"> </span><br><span class="line">&lt;Plugin cpu&gt;</span><br><span class="line">	ReportByCpu true</span><br><span class="line">	ReportByState true</span><br><span class="line">	ValuesPercentage false</span><br><span class="line">&lt;/Plugin&gt;</span><br><span class="line"> </span><br><span class="line">&lt;Plugin interface&gt;</span><br><span class="line">	Interface "eth0"</span><br><span class="line">	IgnoreSelected false</span><br><span class="line"><span class="meta">#</span><span class="bash">	ReportInactive <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	UniqueName <span class="literal">false</span></span></span><br><span class="line">&lt;/Plugin&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;Plugin network&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">	<span class="comment"># client setup:</span></span></span><br><span class="line">Server "127.0.0.1" "25826"</span><br><span class="line"><span class="meta">#</span><span class="bash">	&lt;Server <span class="string">"239.192.74.66"</span> <span class="string">"25826"</span>&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">		SecurityLevel Encrypt</span></span><br><span class="line"><span class="meta">#</span><span class="bash">		Username <span class="string">"user"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">		Password <span class="string">"secret"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">		Interface <span class="string">"eth0"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">		ResolveInterval 14400</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	&lt;/Server&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	TimeToLive 128</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	<span class="comment"># server setup:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	Listen <span class="string">"ff18::efc0:4a42"</span> <span class="string">"25826"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	&lt;Listen <span class="string">"239.192.74.66"</span> <span class="string">"25826"</span>&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">		SecurityLevel Sign</span></span><br><span class="line"><span class="meta">#</span><span class="bash">		AuthFile <span class="string">"/etc/collectd/passwd"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">		Interface <span class="string">"eth0"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	&lt;/Listen&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	MaxPacketSize 1452</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	<span class="comment"># proxy setup (client and server as above):</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	Forward <span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	<span class="comment"># statistics about the network plugin itself</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	ReportStats <span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash">	<span class="comment"># "garbage collection"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">	CacheFlush 1800</span></span><br><span class="line">&lt;/Plugin&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="3、常用命令"><a href="#3、常用命令" class="headerlink" title="3、常用命令"></a>3、常用命令</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">sudo <span class="meta-keyword">/etc/</span>init.d/collectd start</span><br><span class="line">sudo <span class="meta-keyword">/etc/</span>init.d/collectd restart</span><br></pre></td></tr></table></figure>
<h2 id="二、-安装Influxdb"><a href="#二、-安装Influxdb" class="headerlink" title="二、 安装Influxdb"></a>二、 安装Influxdb</h2><h3 id="1、安装-1"><a href="#1、安装-1" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> influxdb</span><br><span class="line">sudo apt <span class="keyword">install</span> influxdb-<span class="keyword">client</span></span><br></pre></td></tr></table></figure>
<h3 id="2、修改influxdb-conf"><a href="#2、修改influxdb-conf" class="headerlink" title="2、修改influxdb.conf"></a>2、修改influxdb.conf</h3><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### [collectd]</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">### Controls one or many listeners for collectd data.</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"> </span><br><span class="line">  [[collectd]]</span><br><span class="line">  <span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">bind-address</span> = <span class="string">"127.0.0.1:25826"</span></span><br><span class="line">  <span class="attr">database</span> = <span class="string">"collectdb"</span></span><br><span class="line">  <span class="comment"># retention-policy = ""</span></span><br><span class="line">  <span class="attr">typesdb</span> = <span class="string">"/usr/share/collectd/types.db"</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># These next lines control how batching works. You should have this enabled</span></span><br><span class="line">  <span class="comment"># otherwise you could get dropped metrics or poor performance. Batching</span></span><br><span class="line">  <span class="comment"># will buffer points in memory if you have many coming in.</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Flush if this many points get buffered</span></span><br><span class="line">  <span class="attr">batch-size</span> = <span class="number">5000</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Number of batches that may be pending in memory</span></span><br><span class="line">  <span class="comment"># batch-pending = 10</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Flush at least this often even if we haven't hit buffer limit</span></span><br><span class="line">  <span class="attr">batch-timeout</span> = <span class="string">"10s"</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.</span></span><br><span class="line">  <span class="attr">read-buffer</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="3、常用命令-1"><a href="#3、常用命令-1" class="headerlink" title="3、常用命令"></a>3、常用命令</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>influxdb status</span><br><span class="line"> </span><br><span class="line">sudo<span class="built_in"> service </span>influxdb start</span><br></pre></td></tr></table></figure>
<h3 id="4、新建数据库"><a href="#4、新建数据库" class="headerlink" title="4、新建数据库"></a>4、新建数据库</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> collectdb</span><br></pre></td></tr></table></figure>
<h3 id="5、查看端口是否监听成功"><a href="#5、查看端口是否监听成功" class="headerlink" title="5、查看端口是否监听成功"></a>5、查看端口是否监听成功</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">netstat -anp<span class="string">| grep 25826</span></span><br></pre></td></tr></table></figure>
<h3 id="6、查看数据"><a href="#6、查看数据" class="headerlink" title="6、查看数据"></a>6、查看数据</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">root@VM<span class="number">-0</span><span class="number">-16</span>-ubuntu:~# influx</span><br><span class="line">Visit https://enterprise.influxdata.com <span class="keyword">to</span> register <span class="keyword">for</span> updates, InfluxDB <span class="keyword">server</span> management, <span class="keyword">and</span> monitoring.</span><br><span class="line">Connected <span class="keyword">to</span> http://localhost:<span class="number">8086</span> <span class="keyword">version</span> <span class="number">1.1</span><span class="number">.1</span></span><br><span class="line">InfluxDB shell <span class="keyword">version</span>: <span class="number">1.1</span><span class="number">.1</span></span><br><span class="line">&gt; use collectdb</span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">database</span> collectdb</span><br><span class="line">&gt; <span class="keyword">show</span> field keys;</span><br><span class="line"><span class="type">name</span>: cpu_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: df_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: disk_io_time</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: disk_read</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: disk_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: disk_weighted_io_time</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: disk_write</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: entropy_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: interface_rx</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: interface_tx</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: irq_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: load_longterm</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: load_midterm</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: load_shortterm</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: memory_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: processes_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: swap_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line"><span class="type">name</span>: users_value</span><br><span class="line">fieldKey	fieldType</span><br><span class="line"><span class="comment">--------	---------</span></span><br><span class="line"><span class="keyword">value</span>		<span class="type">float</span></span><br><span class="line"> </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h3 id="7、通过sql显示15条cpu-value的信息"><a href="#7、通过sql显示15条cpu-value的信息" class="headerlink" title="7、通过sql显示15条cpu_value的信息"></a>7、通过sql显示15条cpu_value的信息</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; select * <span class="keyword">from</span> cpu_value limit 15;</span><br><span class="line">name: cpu_value</span><br><span class="line">time			host		<span class="built_in">	instance	type	</span>type_instance	value</span><br><span class="line">----			----			--------	----	-------------	-----</span><br><span class="line">1573975276185910000	localhost.localdomain	0		cpu<span class="built_in">	user	</span>3429</span><br><span class="line">1573975276185917000	localhost.localdomain	0		cpu<span class="built_in">	system	</span>2646</span><br><span class="line">1573975276185920000	localhost.localdomain	0		cpu	wait	4424</span><br><span class="line">1573975276185936000	localhost.localdomain	0		cpu	nice	149</span><br><span class="line">1573975276185939000	localhost.localdomain	0		cpu	interrupt	0</span><br><span class="line">1573975276185942000	localhost.localdomain	0		cpu	softirq17</span><br><span class="line">1573975276185945000	localhost.localdomain	0		cpu	steal	0</span><br><span class="line">1573975276185947000	localhost.localdomain	0		cpu	idle	122528</span><br><span class="line">1573975286185912000	localhost.localdomain	0		cpu<span class="built_in">	user	</span>3443</span><br><span class="line">1573975286185919000	localhost.localdomain	0		cpu<span class="built_in">	system	</span>2658</span><br><span class="line">1573975286185923000	localhost.localdomain	0		cpu	wait	4428</span><br><span class="line">1573975286185927000	localhost.localdomain	0		cpu	nice	149</span><br><span class="line">1573975286185931000	localhost.localdomain	0		cpu	interrupt	0</span><br><span class="line">1573975286185935000	localhost.localdomain	0		cpu	softirq17</span><br><span class="line">1573975286185937000	localhost.localdomain	0		cpu	steal	0</span><br><span class="line"> </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h2 id="三、安装Grafana"><a href="#三、安装Grafana" class="headerlink" title="三、安装Grafana"></a>三、安装Grafana</h2><h3 id="1、安装grafana"><a href="#1、安装grafana" class="headerlink" title="1、安装grafana"></a>1、安装grafana</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//<span class="keyword">dl</span>.grafana.<span class="keyword">com</span>/oss/release/grafana_6.<span class="number">4.4</span>_amd64.<span class="keyword">deb</span></span><br><span class="line">sudo dpkg -i grafana_6.<span class="number">4.4</span>_amd64.<span class="keyword">deb</span></span><br></pre></td></tr></table></figure>
<h3 id="2、启动"><a href="#2、启动" class="headerlink" title="2、启动"></a>2、启动</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>grafana-server start</span><br></pre></td></tr></table></figure>
<h3 id="3、配置grafana"><a href="#3、配置grafana" class="headerlink" title="3、配置grafana"></a>3、配置grafana</h3><p><code>访问http://127.0.0.1:3000，如果是腾讯云就是你的ip:3000</code></p>
]]></content>
      <categories>
        <category>Collectd</category>
      </categories>
      <tags>
        <tag>grafana</tag>
        <tag>collectd</tag>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome to my new blog</title>
    <url>/2019/11/23/Welcome-to-my-new-blog/</url>
    <content><![CDATA[<p>欢迎来到我的博客，更多精彩请点进来<br><a id="more"></a></p>
<h3 id="我的主页"><a href="#我的主页" class="headerlink" title="我的主页"></a>我的主页</h3><p><a href="https://www.guanacossj.com" target="_blank" rel="noopener" title="https://www.guanacossj.com">https://www.guanacossj.com</a></p>
<h3 id="Github-Page"><a href="#Github-Page" class="headerlink" title="Github Page"></a>Github Page</h3><p><a href="https://www.guanacossj.com" target="_blank" rel="noopener" title="https://arithmeticjia.github.io/">https://arithmeticjia.github.io/</a></p>
]]></content>
      <categories>
        <category>Welcome</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
